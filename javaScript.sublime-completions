{
    "scope": "source.js - keyword.control.js - constant.language.js - string",
    "completions":
    [
    	"this",
    	"layer",
    	"scene",
    	"node",
    	"instanceof",
		{ "trigger" : "if_m", "contents" : "if (${1:true}){\n}"},
		{ "trigger" : "fori _m", "contents" : "for (var i = 0; i < ${1:num}; i++){\n\t${2://TODO something}\n}"},
		{ "trigger" : "forj _m", "contents" : "for (var j = 0; j < ${1:num}; j++){\n}"},

    	"====================== custom ======================",
		{ "trigger" : "ww | V.w", "contents" : "V.w"},
		{ "trigger" : "w2 | V.w2 ", "contents" : "V.w2"},
		{ "trigger" : "hh | V.h", "contents" : "V.h"},
		{ "trigger" : "h2 | V.h2", "contents" : "V.h2"},
		{ "trigger" : "ld | load", "contents" : "load"},
		{ "trigger" : "fn | function", "contents" : "function(){\n\t${1:// TODO something}\n},"},
		{ "trigger" : "fns| function", "contents" : "function(sender){\n\t${1:// TODO something}\n},"},

		{ "trigger" : "lcf 		| loadConfig", "contents" : "loadConfig : function(sender){\n\t${1:// TODO something}\n},"},
		{ "trigger" : "thislcf 	| this.loadConfig();", "contents" : "this.loadConfig();"},
		{ "trigger" : "lit 		| loadInit", "contents" : "loadInit : function(sender){\n\t${1:// TODO something}\n},"},
		{ "trigger" : "thislit 	| this.loadInit();", "contents" : "this.loadInit();"},
		{ "trigger" : "sp 		| this._super();", "contents" : "this._super();"},

		"--------------------------------------------",
		{ "trigger" : "thisa this.addChild(node) ", "contents" : "this.addChild(${1:node});"},
		{ "trigger" : "jz // 加载[xx]", "contents" : "// 加载[${1:xx}]"},

    	"====================== cc.director ======================",
		{ "trigger" : "cc.director.runScene();", "contents" : "cc.director.runScene(${1:scene});"},
		{ "trigger" : "ccl | cc.log(contents)", "contents" : "cc.log(${1:contents});"},

    	"====================== cc.new ======================",
    	{ "trigger" : "newN | var node = new cc.Sprite(attrs) ", "contents" : "var node = new cc.Sprite(${1:res/});"},
    	{ "trigger" : "vnd | var node = ", "contents" : "var node = "},

		{ "trigger" : "newN _All| var node = new cc.Sprite(attrs) ", "contents" : "var node = new cc.Sprite(${1:res/});\nthis.addChild(node);\nnode.setPosition(${2:V.w2}, ${3:V.h2});"},
		{ "trigger" : "new cc.Sprite(attrs) ", "contents" : "new cc.Sprite(${1:res/})"},
		{ "trigger" : "add_addListener ALL_AT_ONCE ", "contents" : "cc.eventManager.addListener({\n\tevent           : cc.EventListener.TOUCH_ALL_AT_ONCE,\n\ttarget          : this,\n\tonTouchesBegan  : this.onTouchesBegan,\n\tonTouchesMoved  : this.onTouchesMoved,\n\tonTouchesEnded  : this.onTouchesEnded \n}, this);"},
		{ "trigger" : "add_addListener ONE_BY_ONE ", "contents" : "cc.eventManager.addListener({\n\tevent           : cc.EventListener.TOUCH_ONE_BY_ONE,\n\ttarget          : this,\n\tswallowTouches  : true,\n\tonTouchBegan  : this.onTouchBegan,\n\tonTouchMoved  : this.onTouchMoved,\n\tonTouchEnded  : this.onTouchEnded \n}, this);"},
		{ "trigger" : "add_onTouch... ", "contents" : "onTouchBegan: function (touch, event) {\n\tvar target = event.getCurrentTarget();\n\tvar locationInNode = target.convertToNodeSpace(touch.getLocation());\n\tvar size = target.getContentSize();\n\tvar rect = cc.rect(0, 0, size.width, size.height);\n\tif (!cc.rectContainsPoint(rect, locationInNode)) {\n\t\treturn false;\n\t}\n\t${1:// TODO something }\n\treturn true;\n},\nonTouchMoved : function (touch, event) {\n\t//var target = event.getCurrentTarget(); \n},\nonTouchEnded : function (touch, event) {\n\t//var target = event.getCurrentTarget(); \n}"},

    	"====================== cc.Node ======================",
		{ "trigger" : "node.attr(attrs) --cc.node", "contents" : "attr({${1:attrs}})"},
		{ "trigger" : "getSkewX() --cc.node", "contents" : "getSkewX()"},
		{ "trigger" : "setSkewX(newSkewX) --cc.node", "contents" : "setSkewX(${1:newSkewX})"},
		{ "trigger" : "getSkewY() --cc.node", "contents" : "getSkewY()"},
		{ "trigger" : "setSkewY(newSkewY) --cc.node", "contents" : "setSkewY(${1:newSkewY})"},
		{ "trigger" : "setLocalZOrder(localZOrder) --cc.node", "contents" : "setLocalZOrder(${1:localZOrder})"},
		{ "trigger" : "getLocalZOrder() --cc.node", "contents" : "getLocalZOrder()"},
		{ "trigger" : "getZOrder() --cc.node", "contents" : "getZOrder()"},
		{ "trigger" : "setZOrder(z) --cc.node", "contents" : "setZOrder(${1:z})"},
		{ "trigger" : "setGlobalZOrder(globalZOrder) --cc.node", "contents" : "setGlobalZOrder(${1:globalZOrder})"},
		{ "trigger" : "getGlobalZOrder() --cc.node", "contents" : "getGlobalZOrder()"},
		{ "trigger" : "getVertexZ() --cc.node", "contents" : "getVertexZ()"},
		{ "trigger" : "setVertexZ(Var) --cc.node", "contents" : "setVertexZ(${1:Var})"},
		{ "trigger" : "getRotation() --cc.node", "contents" : "getRotation()"},
		{ "trigger" : "setRotation(newRotation) --cc.node", "contents" : "setRotation(${1:newRotation})"},
		{ "trigger" : "getRotationX() --cc.node", "contents" : "getRotationX()"},
		{ "trigger" : "setRotationX(rotationX) --cc.node", "contents" : "setRotationX(${1:rotationX})"},
		{ "trigger" : "getRotationY() --cc.node", "contents" : "getRotationY()"},
		{ "trigger" : "setRotationY(rotationY) --cc.node", "contents" : "setRotationY(${1:rotationY})"},
		{ "trigger" : "getScale() --cc.node", "contents" : "getScale()"},
		{ "trigger" : "setScale(scale, scaleY) --cc.node", "contents" : "setScale(${1:scale, scaleY})"},
		{ "trigger" : "getScaleX() --cc.node", "contents" : "getScaleX()"},
		{ "trigger" : "setScaleX(newScaleX) --cc.node", "contents" : "setScaleX(${1:newScaleX})"},
		{ "trigger" : "getScaleY() --cc.node", "contents" : "getScaleY()"},
		{ "trigger" : "setScaleY(newScaleY) --cc.node", "contents" : "setScaleY(${1:newScaleY})"},
		{ "trigger" : "setPosition(newPosOrxValue, yValue) --cc.node", "contents" : "setPosition(${1:newPosOrxValue, yValue})"},
		{ "trigger" : "getPosition() --cc.node", "contents" : "getPosition()"},
		{ "trigger" : "getPositionX() --cc.node", "contents" : "getPositionX()"},
		{ "trigger" : "setPositionX(x) --cc.node", "contents" : "setPositionX(${1:x})"},
		{ "trigger" : "getPositionY() --cc.node", "contents" : "getPositionY()"},
		{ "trigger" : "setPositionY(y) --cc.node", "contents" : "setPositionY(${1:y})"},
		{ "trigger" : "getChildrenCount() --cc.node", "contents" : "getChildrenCount()"},
		{ "trigger" : "getChildren() --cc.node", "contents" : "getChildren()"},
		{ "trigger" : "isVisible() --cc.node", "contents" : "isVisible()"},
		{ "trigger" : "setVisible(visible) --cc.node", "contents" : "setVisible(${1:visible})"},
		{ "trigger" : "getAnchorPoint() --cc.node", "contents" : "getAnchorPoint()"},
		{ "trigger" : "setAnchorPoint(point, y) --cc.node", "contents" : "setAnchorPoint(${1:point, y})"},
		{ "trigger" : "getAnchorPointInPoints() --cc.node", "contents" : "getAnchorPointInPoints()"},
		{ "trigger" : "getContentSize() --cc.node", "contents" : "getContentSize()"},
		{ "trigger" : "setContentSize(size, height) --cc.node", "contents" : "setContentSize(${1:size, height})"},
		{ "trigger" : "isRunning() --cc.node", "contents" : "isRunning()"},
		{ "trigger" : "getParent() --cc.node", "contents" : "getParent()"},
		{ "trigger" : "setParent(parent) --cc.node", "contents" : "setParent(${1:parent})"},
		{ "trigger" : "isIgnoreAnchorPointForPosition() --cc.node", "contents" : "isIgnoreAnchorPointForPosition()"},
		{ "trigger" : "ignoreAnchorPointForPosition(newValue) --cc.node", "contents" : "ignoreAnchorPointForPosition(${1:newValue})"},
		{ "trigger" : "getTag() --cc.node", "contents" : "getTag()"},
		{ "trigger" : "setTag(tag) --cc.node", "contents" : "setTag(${1:tag})"},
		{ "trigger" : "getUserData() --cc.node", "contents" : "getUserData()"},
		{ "trigger" : "setUserData(Var) --cc.node", "contents" : "setUserData(${1:Var})"},
		{ "trigger" : "getUserObject() --cc.node", "contents" : "getUserObject()"},
		{ "trigger" : "setUserObject(newValue) --cc.node", "contents" : "setUserObject(${1:newValue})"},
		{ "trigger" : "getOrderOfArrival() --cc.node", "contents" : "getOrderOfArrival()"},
		{ "trigger" : "setOrderOfArrival(Var) --cc.node", "contents" : "setOrderOfArrival(${1:Var})"},
		{ "trigger" : "getActionManager() --cc.node", "contents" : "getActionManager()"},
		{ "trigger" : "setActionManager(actionManager) --cc.node", "contents" : "setActionManager(${1:actionManager})"},
		{ "trigger" : "getScheduler() --cc.node", "contents" : "getScheduler()"},
		{ "trigger" : "setScheduler(scheduler) --cc.node", "contents" : "setScheduler(${1:scheduler})"},
		{ "trigger" : "getBoundingBox() --cc.node", "contents" : "getBoundingBox()"},
		{ "trigger" : "cleanup() --cc.node", "contents" : "cleanup()"},
		{ "trigger" : "getChildByTag(aTag) --cc.node", "contents" : "getChildByTag(${1:aTag})"},
		{ "trigger" : "addChild(child, localZOrder, tag) --cc.node", "contents" : "addChild(${1:child, localZOrder, tag})"},
		{ "trigger" : "removeFromParent(cleanup) --cc.node", "contents" : "removeFromParent()"},
		{ "trigger" : "removeFromParentAndCleanup(cleanup) --cc.node", "contents" : "removeFromParentAndCleanup(${1:cleanup})"},
		{ "trigger" : "removeChild(child, cleanup) --cc.node", "contents" : "removeChild(${1:child, cleanup})"},
		{ "trigger" : "removeChildByTag(tag, cleanup) --cc.node", "contents" : "removeChildByTag(${1:tag, cleanup})"},
		{ "trigger" : "removeAllChildrenWithCleanup(cleanup) --cc.node", "contents" : "removeAllChildrenWithCleanup(${1:cleanup})"},
		{ "trigger" : "removeAllChildren(cleanup) --cc.node", "contents" : "removeAllChildren(${1:cleanup})"},
		{ "trigger" : "reorderChild(child, zOrder) --cc.node", "contents" : "reorderChild(${1:child, zOrder})"},
		{ "trigger" : "sortAllChildren() --cc.node", "contents" : "sortAllChildren()"},
		{ "trigger" : "draw(ctx) --cc.node", "contents" : "draw(${1:ctx})"},
		{ "trigger" : "transformAncestors() --cc.node", "contents" : "transformAncestors()"},
		{ "trigger" : "onEnter() --cc.node", "contents" : "onEnter()"},
		{ "trigger" : "onEnterTransitionDidFinish() --cc.node", "contents" : "onEnterTransitionDidFinish()"},
		{ "trigger" : "onExitTransitionDidStart() --cc.node", "contents" : "onExitTransitionDidStart()"},
		{ "trigger" : "onExit() --cc.node", "contents" : "onExit()"},
		{ "trigger" : "runAction(action) --cc.node", "contents" : "runAction(${1:action});"},
		{ "trigger" : "stopAllActions() --cc.node", "contents" : "stopAllActions()"},
		{ "trigger" : "stopAction(action) --cc.node", "contents" : "stopAction(${1:action})"},
		{ "trigger" : "stopActionByTag(tag) --cc.node", "contents" : "stopActionByTag(${1:tag})"},
		{ "trigger" : "getActionByTag(tag) --cc.node", "contents" : "getActionByTag(${1:tag})"},
		{ "trigger" : "getNumberOfRunningActions() --cc.node", "contents" : "getNumberOfRunningActions()"},
		{ "trigger" : "scheduleUpdate() --cc.node", "contents" : "scheduleUpdate()"},
		{ "trigger" : "scheduleUpdateWithPriority(priority) --cc.node", "contents" : "scheduleUpdateWithPriority(${1:priority})"},
		{ "trigger" : "unscheduleUpdate() --cc.node", "contents" : "unscheduleUpdate()"},
		{ "trigger" : "schedule(callback_fn, interval, repeat, delay) --cc.node", "contents" : "schedule(${1:callback_fn, interval, repeat, delay})"},
		{ "trigger" : "scheduleOnce(callback_fn, delay) --cc.node", "contents" : "scheduleOnce(${1:callback_fn, delay})"},
		{ "trigger" : "unschedule(callback_fn) --cc.node", "contents" : "unschedule(${1:callback_fn})"},
		{ "trigger" : "unscheduleAllCallbacks() --cc.node", "contents" : "unscheduleAllCallbacks()"},
		{ "trigger" : "resumeSchedulerAndActions() --cc.node", "contents" : "resumeSchedulerAndActions()"},
		{ "trigger" : "resume() --cc.node", "contents" : "resume()"},
		{ "trigger" : "pauseSchedulerAndActions() --cc.node", "contents" : "pauseSchedulerAndActions()"},
		{ "trigger" : "pause() --cc.node", "contents" : "pause()"},
		{ "trigger" : "setAdditionalTransform(additionalTransform) --cc.node", "contents" : "setAdditionalTransform(${1:additionalTransform})"},
		{ "trigger" : "getParentToNodeTransform() --cc.node", "contents" : "getParentToNodeTransform()"},
		{ "trigger" : "parentToNodeTransform() --cc.node", "contents" : "parentToNodeTransform()"},
		{ "trigger" : "getNodeToWorldTransform() --cc.node", "contents" : "getNodeToWorldTransform()"},
		{ "trigger" : "getWorldToNodeTransform() --cc.node", "contents" : "getWorldToNodeTransform()"},
		{ "trigger" : "worldToNodeTransform() --cc.node", "contents" : "worldToNodeTransform()"},
		{ "trigger" : "convertToNodeSpace(worldPoint) --cc.node", "contents" : "convertToNodeSpace(${1:worldPoint})"},
		{ "trigger" : "convertToWorldSpace(nodePoint) --cc.node", "contents" : "convertToWorldSpace(${1:nodePoint})"},
		{ "trigger" : "convertToNodeSpaceAR(worldPoint) --cc.node", "contents" : "convertToNodeSpaceAR(${1:worldPoint})"},
		{ "trigger" : "convertToWorldSpaceAR(nodePoint) --cc.node", "contents" : "convertToWorldSpaceAR(${1:nodePoint})"},
		{ "trigger" : "convertTouchToNodeSpace(touch) --cc.node", "contents" : "convertTouchToNodeSpace(${1:touch})"},
		{ "trigger" : "convertTouchToNodeSpaceAR(touch) --cc.node", "contents" : "convertTouchToNodeSpaceAR(${1:touch})"},
		{ "trigger" : "update(dt) --cc.node", "contents" : "update(${1:dt})"},
		{ "trigger" : "updateTransform() --cc.node", "contents" : "updateTransform()"},
		{ "trigger" : "retain() --cc.node", "contents" : "retain()"},
		{ "trigger" : "release() --cc.node", "contents" : "release()"},
		{ "trigger" : "getComponent(name) --cc.node", "contents" : "getComponent(${1:name})"},
		{ "trigger" : "addComponent(component) --cc.node", "contents" : "addComponent(${1:component})"},
		{ "trigger" : "removeComponent(component) --cc.node", "contents" : "removeComponent(${1:component})"},
		{ "trigger" : "removeAllComponents() --cc.node", "contents" : "removeAllComponents()"},
		{ "trigger" : "getCamera() --cc.node", "contents" : "getCamera()"},
		{ "trigger" : "getGrid() --cc.node", "contents" : "getGrid()"},
		{ "trigger" : "setGrid(grid) --cc.node", "contents" : "setGrid(${1:grid})"},
		{ "trigger" : "getShaderProgram() --cc.node", "contents" : "getShaderProgram()"},
		{ "trigger" : "setShaderProgram(newShaderProgram) --cc.node", "contents" : "setShaderProgram(${1:newShaderProgram})"},
		{ "trigger" : "getGLServerState() --cc.node", "contents" : "getGLServerState()"},
		{ "trigger" : "setGLServerState(state) --cc.node", "contents" : "setGLServerState(${1:state})"},
		{ "trigger" : "getBoundingBoxToWorld() --cc.node", "contents" : "getBoundingBoxToWorld()"},
		{ "trigger" : "getOpacity() --cc.node", "contents" : "getOpacity()"},
		{ "trigger" : "getDisplayedOpacity() --cc.node", "contents" : "getDisplayedOpacity()"},
		{ "trigger" : "setOpacity(opacity) --cc.node", "contents" : "setOpacity(${1:opacity})"},
		{ "trigger" : "updateDisplayedOpacity(parentOpacity) --cc.node", "contents" : "updateDisplayedOpacity(${1:parentOpacity})"},
		{ "trigger" : "isCascadeOpacityEnabled() --cc.node", "contents" : "isCascadeOpacityEnabled()"},
		{ "trigger" : "setCascadeOpacityEnabled(cascadeOpacityEnabled) --cc.node", "contents" : "setCascadeOpacityEnabled(${1:cascadeOpacityEnabled})"},
		{ "trigger" : "getColor() --cc.node", "contents" : "getColor()"},
		{ "trigger" : "getDisplayedColor() --cc.node", "contents" : "getDisplayedColor()"},
		{ "trigger" : "setColor(color) --cc.node", "contents" : "setColor(${1:color})"},
		{ "trigger" : "updateDisplayedColor(parentColor) --cc.node", "contents" : "updateDisplayedColor(${1:parentColor})"},
		{ "trigger" : "isCascadeColorEnabled() --cc.node", "contents" : "isCascadeColorEnabled()"},
		{ "trigger" : "setCascadeColorEnabled(cascadeColorEnabled) --cc.node", "contents" : "setCascadeColorEnabled(${1:cascadeColorEnabled})"},
		{ "trigger" : "setOpacityModifyRGB(opacityValue) --cc.node", "contents" : "setOpacityModifyRGB(${1:opacityValue})"},
		{ "trigger" : "isOpacityModifyRGB() --cc.node", "contents" : "isOpacityModifyRGB()"},

		"-----------cc.action-----------",
		{ "trigger" : "cc.action() --cc.action", "contents" : "cc.action()"},
		{ "trigger" : "ctor() --cc.action", "contents" : "ctor()"},
		{ "trigger" : "copy() --cc.action", "contents" : "copy()"},
		{ "trigger" : "clone() --cc.action", "contents" : "clone()"},
		{ "trigger" : "isDone() --cc.action", "contents" : "isDone()"},
		{ "trigger" : "startWithTarget(target) --cc.action", "contents" : "startWithTarget(${1:target})"},
		{ "trigger" : "stop() --cc.action", "contents" : "stop()"},
		{ "trigger" : "step(dt) --cc.action", "contents" : "step(${1:dt})"},
		{ "trigger" : "update(dt) --cc.action", "contents" : "update(${1:dt})"},
		{ "trigger" : "getTarget() --cc.action", "contents" : "getTarget()"},
		{ "trigger" : "setTarget(target) --cc.action", "contents" : "setTarget(${1:target})"},
		{ "trigger" : "getOriginalTarget() --cc.action", "contents" : "getOriginalTarget()"},
		{ "trigger" : "setOriginalTarget(originalTarget) --cc.action", "contents" : "setOriginalTarget(${1:originalTarget})"},
		{ "trigger" : "getTag() --cc.action", "contents" : "getTag()"},
		{ "trigger" : "setTag(tag) --cc.action", "contents" : "setTag(${1:tag})"},
		{ "trigger" : "retain() --cc.action", "contents" : "retain()"},
		{ "trigger" : "release() --cc.action", "contents" : "release()"},

		"-----------cc.FiniteTimeAction-----------",
		{ "trigger" : "ctor() --cc.FiniteTimeAction", "contents" : "ctor()"},
		{ "trigger" : "getDuration() --cc.FiniteTimeAction", "contents" : "getDuration()"},
		{ "trigger" : "setDuration(duration) --cc.FiniteTimeAction", "contents" : "setDuration(${1:duration})"},
		{ "trigger" : "reverse() --cc.FiniteTimeAction", "contents" : "reverse()"},
		{ "trigger" : "clone() --cc.FiniteTimeAction", "contents" : "clone()"},

		"-----------cc.speed-----------",
		{ "trigger" : "cc.speed(${1:action, speed})  --cc.speed", "contents" : "cc.speed(${1:action, speed})"},
		{ "trigger" : "ctor(action, speed) --cc.speed", "contents" : "ctor(${1:action, speed})"},
		{ "trigger" : "getSpeed() --cc.speed", "contents" : "getSpeed()"},
		{ "trigger" : "setSpeed(speed) --cc.speed", "contents" : "setSpeed(${1:speed})"},
		{ "trigger" : "initWithAction(action, speed) --cc.speed", "contents" : "initWithAction(${1:action, speed})"},
		{ "trigger" : "clone() --cc.speed", "contents" : "clone()"},
		{ "trigger" : "startWithTarget(target) --cc.speed", "contents" : "startWithTarget(${1:target})"},
		{ "trigger" : "stop() --cc.speed", "contents" : "stop()"},
		{ "trigger" : "step(dt) --cc.speed", "contents" : "step(${1:dt})"},
		{ "trigger" : "isDone() --cc.speed", "contents" : "isDone()"},
		{ "trigger" : "reverse() --cc.speed", "contents" : "reverse()"},
		{ "trigger" : "setInnerAction(action) --cc.speed", "contents" : "setInnerAction(${1:action})"},
		{ "trigger" : "getInnerAction() --cc.speed", "contents" : "getInnerAction()"},

		"-----------cc.follow-----------",
		{ "trigger" : "cc.follow(${1:followedNode, rect}) --cc.follow", "contents" : "cc.follow(${1:followedNode, rect}"},
		{ "trigger" : "ctor(followedNode, rect) --cc.follow", "contents" : "ctor(${1:followedNode, rect})"},
		{ "trigger" : "clone() --cc.follow", "contents" : "clone()"},
		{ "trigger" : "isBoundarySet() --cc.follow", "contents" : "isBoundarySet()"},
		{ "trigger" : "setBoudarySet(value) --cc.follow", "contents" : "setBoudarySet(${1:value})"},
		{ "trigger" : "initWithTarget(followedNode, rect) --cc.follow", "contents" : "initWithTarget(${1:followedNode, rect})"},
		{ "trigger" : "step(dt) --cc.follow", "contents" : "step(${1:dt})"},
		{ "trigger" : "isDone() --cc.follow", "contents" : "isDone()"},
		{ "trigger" : "stop() --cc.follow", "contents" : "stop()"},

		"-------------cc.sys-------------",
		{"trigger" : "cc.sys.LANGUAGE_ENGLISH" , "contents" : "cc.sys.LANGUAGE_ENGLISH"},
		{"trigger" : "cc.sys.LANGUAGE_CHINESE" , "contents" : "cc.sys.LANGUAGE_CHINESE"},
		{"trigger" : "cc.sys.LANGUAGE_FRENCH" , "contents" : "cc.sys.LANGUAGE_FRENCH"},
		{"trigger" : "cc.sys.LANGUAGE_ITALIAN" , "contents" : "cc.sys.LANGUAGE_ITALIAN"},
		{"trigger" : "cc.sys.LANGUAGE_GERMAN" , "contents" : "cc.sys.LANGUAGE_GERMAN"},
		{"trigger" : "cc.sys.LANGUAGE_SPANISH" , "contents" : "cc.sys.LANGUAGE_SPANISH"},
		{"trigger" : "cc.sys.LANGUAGE_DUTCH" , "contents" : "cc.sys.LANGUAGE_DUTCH"},
		{"trigger" : "cc.sys.LANGUAGE_RUSSIAN" , "contents" : "cc.sys.LANGUAGE_RUSSIAN"},
		{"trigger" : "cc.sys.LANGUAGE_KOREAN" , "contents" : "cc.sys.LANGUAGE_KOREAN"},
		{"trigger" : "cc.sys.LANGUAGE_JAPANESE" , "contents" : "cc.sys.LANGUAGE_JAPANESE"},
		{"trigger" : "cc.sys.LANGUAGE_HUNGARIAN" , "contents" : "cc.sys.LANGUAGE_HUNGARIAN"},
		{"trigger" : "cc.sys.LANGUAGE_PORTUGUESE" , "contents" : "cc.sys.LANGUAGE_PORTUGUESE"},
		{"trigger" : "cc.sys.LANGUAGE_ARABIC" , "contents" : "cc.sys.LANGUAGE_ARABIC"},
		{"trigger" : "cc.sys.LANGUAGE_NORWEGIAN" , "contents" : "cc.sys.LANGUAGE_NORWEGIAN"},
		{"trigger" : "cc.sys.LANGUAGE_POLISH" , "contents" : "cc.sys.LANGUAGE_POLISH"},
		{"trigger" : "cc.sys.OS_IOS" , "contents" : "cc.sys.OS_IOS"},
		{"trigger" : "cc.sys.OS_ANDROID" , "contents" : "cc.sys.OS_ANDROID"},
		{"trigger" : "cc.sys.OS_WINDOWS" , "contents" : "cc.sys.OS_WINDOWS"},
		{"trigger" : "cc.sys.OS_MARMALADE" , "contents" : "cc.sys.OS_MARMALADE"},
		{"trigger" : "cc.sys.OS_LINUX" , "contents" : "cc.sys.OS_LINUX"},
		{"trigger" : "cc.sys.OS_BADA" , "contents" : "cc.sys.OS_BADA"},
		{"trigger" : "cc.sys.OS_BLACKBERRY" , "contents" : "cc.sys.OS_BLACKBERRY"},
		{"trigger" : "cc.sys.OS_OSX" , "contents" : "cc.sys.OS_OSX"},
		{"trigger" : "cc.sys.OS_WP8" , "contents" : "cc.sys.OS_WP8"},
		{"trigger" : "cc.sys.OS_WINRT" , "contents" : "cc.sys.OS_WINRT"},
		{"trigger" : "cc.sys.OS_UNKNOWN" , "contents" : "cc.sys.OS_UNKNOWN"},
		{"trigger" : "cc.sys.UNKNOWN" , "contents" : "cc.sys.UNKNOWN"},
		{"trigger" : "cc.sys.IOS" , "contents" : "cc.sys.IOS"},
		{"trigger" : "cc.sys.ANDROID" , "contents" : "cc.sys.ANDROID"},
		{"trigger" : "cc.sys.WIN32" , "contents" : "cc.sys.WIN32"},
		{"trigger" : "cc.sys.MARMALADE" , "contents" : "cc.sys.MARMALADE"},
		{"trigger" : "cc.sys.LINUX" , "contents" : "cc.sys.LINUX"},
		{"trigger" : "cc.sys.BADA" , "contents" : "cc.sys.BADA"},
		{"trigger" : "cc.sys.BLACKBERRY" , "contents" : "cc.sys.BLACKBERRY"},
		{"trigger" : "cc.sys.MACOS" , "contents" : "cc.sys.MACOS"},
		{"trigger" : "cc.sys.NACL" , "contents" : "cc.sys.NACL"},
		{"trigger" : "cc.sys.EMSCRIPTEN" , "contents" : "cc.sys.EMSCRIPTEN"},
		{"trigger" : "cc.sys.TIZEN" , "contents" : "cc.sys.TIZEN"},
		{"trigger" : "cc.sys.QT5" , "contents" : "cc.sys.QT5"},
		{"trigger" : "cc.sys.WP8" , "contents" : "cc.sys.WP8"},
		{"trigger" : "cc.sys.WINRT" , "contents" : "cc.sys.WINRT"},
		{"trigger" : "cc.sys.MOBILE_BROWSER" , "contents" : "cc.sys.MOBILE_BROWSER"},
		{"trigger" : "cc.sys.DESKTOP_BROWSER" , "contents" : "cc.sys.DESKTOP_BROWSER"},
		{"trigger" : "cc.sys.BROWSER_TYPE_WECHAT" , "contents" : "cc.sys.BROWSER_TYPE_WECHAT"},
		{"trigger" : "cc.sys.BROWSER_TYPE_ANDROID" , "contents" : "cc.sys.BROWSER_TYPE_ANDROID"},
		{"trigger" : "cc.sys.BROWSER_TYPE_IE" , "contents" : "cc.sys.BROWSER_TYPE_IE"},
		{"trigger" : "cc.sys.BROWSER_TYPE_QQ" , "contents" : "cc.sys.BROWSER_TYPE_QQ"},
		{"trigger" : "cc.sys.BROWSER_TYPE_MOBILE_QQ" , "contents" : "cc.sys.BROWSER_TYPE_MOBILE_QQ"},
		{"trigger" : "cc.sys.BROWSER_TYPE_UC" , "contents" : "cc.sys.BROWSER_TYPE_UC"},
		{"trigger" : "cc.sys.BROWSER_TYPE_360" , "contents" : "cc.sys.BROWSER_TYPE_360"},
		{"trigger" : "cc.sys.BROWSER_TYPE_BAIDU_APP" , "contents" : "cc.sys.BROWSER_TYPE_BAIDU_APP"},
		{"trigger" : "cc.sys.BROWSER_TYPE_BAIDU" , "contents" : "cc.sys.BROWSER_TYPE_BAIDU"},
		{"trigger" : "cc.sys.BROWSER_TYPE_MAXTHON" , "contents" : "cc.sys.BROWSER_TYPE_MAXTHON"},
		{"trigger" : "cc.sys.BROWSER_TYPE_OPERA" , "contents" : "cc.sys.BROWSER_TYPE_OPERA"},
		{"trigger" : "cc.sys.BROWSER_TYPE_OUPENG" , "contents" : "cc.sys.BROWSER_TYPE_OUPENG"},
		{"trigger" : "cc.sys.BROWSER_TYPE_MIUI" , "contents" : "cc.sys.BROWSER_TYPE_MIUI"},
		{"trigger" : "cc.sys.BROWSER_TYPE_FIREFOX" , "contents" : "cc.sys.BROWSER_TYPE_FIREFOX"},
		{"trigger" : "cc.sys.BROWSER_TYPE_SAFARI" , "contents" : "cc.sys.BROWSER_TYPE_SAFARI"},
		{"trigger" : "cc.sys.BROWSER_TYPE_CHROME" , "contents" : "cc.sys.BROWSER_TYPE_CHROME"},
		{"trigger" : "cc.sys.BROWSER_TYPE_LIEBAO" , "contents" : "cc.sys.BROWSER_TYPE_LIEBAO"},
		{"trigger" : "cc.sys.BROWSER_TYPE_QZONE" , "contents" : "cc.sys.BROWSER_TYPE_QZONE"},
		{"trigger" : "cc.sys.BROWSER_TYPE_SOUGOU" , "contents" : "cc.sys.BROWSER_TYPE_SOUGOU"},
		{"trigger" : "cc.sys.BROWSER_TYPE_UNKNOWN" , "contents" : "cc.sys.BROWSER_TYPE_UNKNOWN"},
		{"trigger" : "cc.sys.isNative", "contents" : "cc.sys.isNative"},
		{"trigger" : "cc.sys.isMobile", "contents" : "cc.sys.isMobile"},
		{"trigger" : "cc.sys.platform", "contents" : "cc.sys.platform"},
		{"trigger" : "cc.sys.language", "contents" : "cc.sys.language"},
		{"trigger" : "cc.sys.browserType", "contents" : "cc.sys.browserType"},
		{"trigger" : "cc.sys.os", "contents" : "cc.sys.os"},
		{"trigger" : "cc.sys.localStorage.getItem(key);", "contents" : "cc.sys.localStorage.getItem(${1:key});"},
		{"trigger" : "cc.sys.localStorage.setItem(key, value);", "contents" : "cc.sys.localStorage.setItem(${1:key}, ${2:value});"},
		{"trigger" : "cc.sys.garbageCollect();", "contents" : "cc.sys.garbageCollect();"},
		{"trigger" : "cc.sys.dumpRoot();", "contents" : "cc.sys.dumpRoot();"},
		{"trigger" : "cc.sys.restartVM();", "contents" : "cc.sys.restartVM();"},
		{"trigger" : "cc.sys.cleanScript(jsfile);", "contents" : "cc.sys.cleanScript(jsfile);"},
		{"trigger" : "cc.sys.isObjectValid(obj);", "contents" : "cc.sys.isObjectValid(obj);"},
		{"trigger" : "cc.sys.dump();", "contents" : "cc.sys.dump();"},
		{"trigger" : "cc.sys.openURL(url);", "contents" : "cc.sys.openURL(url);"},

		"--------------cc.action------------",
		{"trigger" : "cc.action();", "contents" : "cc.action();"},
		{"trigger" : "cc.speed(action, duration);", "contents" : "cc.speed(${1:action}, ${2:duration});"},
		{"trigger" : "cc.follow(node, cc.rect(x, y, w, h));", "contents" : "cc.follow(${1:node}, cc.rect(${2:x}, ${3:y}, ${4:w}, ${5:h}}));"},
		{"trigger" : "cc.orbitCamera(t, radius, deltaRadius, angleZ, deltaAngleZ, angleX, deltaAngleX);", "contents" : "cc.orbitCamera(${1:t}, ${2:radius}, ${3:deltaRadius}, ${4:angleZ}, ${5:deltaAngleZ}, ${6:angleX}, ${7:deltaAngleX});"},
		{"trigger" : "cc.cardinalSplineTo(duration, points, tension);", "contents" : "cc.cardinalSplineTo(${1:duration}, ${2:points, tension});"},
		{"trigger" : "cc.cardinalSplineBy(duration, points, tension);", "contents" : "cc.cardinalSplineBy(${1:duration}, ${2:points, tension});"},
		{"trigger" : "cc.catmullRomTo(dt, points);", "contents" : "cc.catmullRomTo(${1:dt}, ${2:points);"},
		{"trigger" : "cc.catmullRomBy(dt, points);", "contents" : "cc.catmullRomBy(${1:dt}, ${2:points);"},
		{"trigger" : "cc.show();", "contents" : "cc.show();"},
		{"trigger" : "cc.hide();", "contents" : "cc.hide();"},
		{"trigger" : "cc.toggleVisibility();", "contents" : "cc.toggleVisibility();"},
		{"trigger" : "cc.removeSelf();", "contents" : "cc.removeSelf();"},
		{"trigger" : "cc.flipX(bool);", "contents" : "cc.flipX(${1:bool});"},
		{"trigger" : "cc.flipY(bool);", "contents" : "cc.flipY(${1:bool});"},
		{"trigger" : "cc.place();", "contents" : "cc.place();"},
		{"trigger" : "cc.callFunc(function(){}.bind(this));", "contents" : "cc.callFunc(${1:function(){}.bind(this)});"},
		{"trigger" : "cc.actionInterval();", "contents" : "cc.actionInterval();"},
		{"trigger" : "cc.sequence(action1, action2);", "contents" : "cc.sequence(${1:action1}, ${2:action2});"},
		{"trigger" : "cc.repeat(count);", "contents" : "cc.repeat(${1:count});"},
		{"trigger" : "cc.repeatForever();", "contents" : "repeatForever();"},
		{"trigger" : "cc.spawn(action1, action2);", "contents" : "cc.spawn(${1:action1}, ${2:action2});"},
		{"trigger" : "cc.rotateTo(duration, deltaAngleX, deltaAngleY);", "contents" : "cc.rotateTo(${1:duration}, ${2:deltaAngleX, deltaAngleY});"},
		{"trigger" : "cc.rotateBy(duration, deltaAngleX, deltaAngleY);", "contents" : "cc.rotateBy(${1:duration}, ${2:deltaAngleX, deltaAngleY});"},
		{"trigger" : "cc.moveBy(duration, deltaPos, deltaY);", "contents" : "cc.moveBy(${1:duration}, ${2:deltaPos, deltaY});"},
		{"trigger" : "cc.moveTo(duration, deltaPos, deltaY);", "contents" : "cc.moveTo(${1:duration}, ${2:deltaPos, deltaY});"},
		{"trigger" : "cc.skewTo(t, sx, sy);", "contents" : "cc.skewTo(t, sx, sy);"},
		{"trigger" : "cc.skewBy(t, sx, sy);", "contents" : "cc.skewBy(t, sx, sy);"},
		{"trigger" : "cc.jumpBy(duration, position, y, height, jumps);", "contents" : "cc.jumpBy(${1:duration}, position, y, height, jumps);"},
		{"trigger" : "cc.jumpTo(duration, position, y, height, jumps);", "contents" : "cc.jumpTo(${1:duration}, position, y, height, jumps);"},
		{"trigger" : "cc.bezierBy(duration, points);", "contents" : "cc.bezierBy(${1:duration}, points);"},
		{"trigger" : "cc.bezierTo(duration, points);", "contents" : "cc.bezierTo(${1:duration}, points);"},
		{"trigger" : "cc.scaleTo(duration, sx, sy);", "contents" : "cc.scaleTo(${1:duration}, ${2:sx, sy});"},
		{"trigger" : "cc.scaleBy(duration, sx, sy);", "contents" : "cc.scaleBy(${1:duration}, ${2:sx, sy});"},
		{"trigger" : "cc.blink(duration, blinks);", "contents" : "cc.blink(${1:duration}, blinks);"},
		{"trigger" : "cc.fadeTo(duration, opacity);", "contents" : "cc.fadeTo(${1:duration}, opacity);"},
		{"trigger" : "cc.fadeIn(duration);", "contents" : "cc.fadeIn(${1:duration});"},
		{"trigger" : "cc.fadeOut(duration);", "contents" : "cc.fadeOut(${1:duration});"},
		{"trigger" : "cc.tintTo(duration, red, green, blue);", "contents" : "cc.tintTo(${1:duration}, red, green, blue);"},
		{"trigger" : "cc.tintBy(duration, red, green, blue);", "contents" : "cc.tintBy(${1:duration}, red, green, blue);"},
		{"trigger" : "cc.delayTime(duration);", "contents" : "cc.delayTime(${1:duration});"},
		{"trigger" : "cc.reverseTime();", "contents" : "cc.reverseTime();"},
		{"trigger" : "cc.animate(animation);", "contents" : "cc.animate(${1:animation});"},
		{"trigger" : "cc.targetedAction();", "contents" : "cc.targetedAction();"},
		{"trigger" : "cc.actionTween();", "contents" : "cc.actionTween();"},

    ]
}